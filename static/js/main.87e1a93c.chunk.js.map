{"version":3,"sources":["App.js","index.js"],"names":["Section","section","title","cards","Paper","elevation","Box","p","mt","Typography","variant","ml","clone","Chip","label","length","map","card","author","content","SectionItem","List","dense","ListItem","disableGutters","ListItemText","primary","secondary","component","color","name","App","useState","textareaContent","setTextareaContent","open","message","severity","snackbarState","setSnackbarState","handleSnackbarClose","className","TextField","fullWidth","id","inputProps","style","fontSize","fontFamily","join","multiline","onChange","e","parsedTextarea","JSON","parse","target","value","rows","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","Alert","Object","entries","renderSection","rootElement","document","getElementById","ReactDOM","render"],"mappings":"0RAYMA,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,cAAuBA,EAAvB,GAAOC,EAAP,KAAcC,EAAd,KAEA,OACE,cAACC,EAAA,EAAD,CAAOC,UAAW,GAAlB,SACE,eAACC,EAAA,EAAD,CAAKC,EAAG,EAAGC,GAAI,EAAf,UACE,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,UACGR,EACD,cAACI,EAAA,EAAD,CAAKK,GAAI,EAAGC,OAAK,EAAjB,SACE,cAACC,EAAA,EAAD,CAAMC,MAAK,UAAKX,EAAMY,OAAX,iBAGdZ,EAAMa,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,CAAaC,OAAQD,EAAKC,OAAQC,QAASF,EAAKE,mBAOpDC,EAAc,SAAC,GAAyB,IAAvBF,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC7B,OACE,cAACE,EAAA,EAAD,CAAMC,OAAK,EAAX,SACE,cAACC,EAAA,EAAD,CAAUC,gBAAc,EAAxB,SACE,cAACC,EAAA,EAAD,CACEC,QAASP,EACTQ,UACE,cAAClB,EAAA,EAAD,CAAYmB,UAAU,OAAOlB,QAAQ,QAAQmB,MAAM,gBAAnD,SACGX,EAAOY,cASP,SAASC,IACtB,MAA8CC,mBAAS,MAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA0CF,mBAAS,CACjDG,MAAM,EACNC,QAAS,GACTC,SAAU,WAHZ,mBAAOC,EAAP,KAAsBC,EAAtB,KAcMC,EAAsB,WAC1BD,EAAiB,2BACZD,GADW,IAEdH,MAAM,MAwBV,OACE,sBAAKM,UAAU,MAAf,UACE,cAACC,EAAA,EAAD,CACEC,WAAS,EACTC,GAAG,kBACHC,WAAY,CACVC,MAAO,CACLC,SAAU,GACVC,WAAY,CAAC,WAAY,SAAU,oBAAoBC,KAAK,OAGhEnC,MAAM,kBACNoC,WAAS,EACTC,SAjCuB,SAACC,GAC5B,IACE,IAAMC,EAAiBC,KAAKC,MAAMH,EAAEI,OAAOC,OAC3CvB,EAAmBmB,GACnBd,EAAiB,2BACZD,GADW,IAEdH,MAAM,EACNC,QAAS,cACTC,SAAU,aAEZ,MAAOe,GACPb,EAAiB,2BACZD,GADW,IAEdH,MAAM,EACNC,QAASgB,EAAEhB,QACXC,SAAU,aAmBVqB,KAAM,GACNhD,QAAQ,WAEV,cAACiD,EAAA,EAAD,CACEC,aAAc,CACZC,SAAU,MACVC,WAAY,SAEdC,iBAAkB,IAElBC,QAASxB,EACTL,KAAMG,EAAcH,KARtB,SAUE,cAAC8B,EAAA,EAAD,CACED,QAASxB,EACTH,SAAUC,EAAcD,SACxB3B,QAAQ,SAHV,SAKG4B,EAAcF,WAfnB,mBAMmBE,EAAcD,WAahCJ,GACCiC,OAAOC,QAAQlC,GAAiBjB,KAAI,SAACf,GAAD,OAxEpB,SAACA,GAGrB,OAFA,YAAkBA,EAAlB,MAEUc,OAAe,cAAC,EAAD,CAASd,QAASA,IAEpC,KAoEDmE,CAAcnE,SC9HxB,IAAMoE,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC1C,EAAD,IAASsC,K","file":"static/js/main.87e1a93c.chunk.js","sourcesContent":["import Alert from \"@material-ui/lab/Alert\";\nimport Box from \"@material-ui/core/Box\";\nimport Chip from \"@material-ui/core/Chip\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useState } from \"react\";\n\nconst Section = ({ section }) => {\n  const [title, cards] = section;\n\n  return (\n    <Paper elevation={16}>\n      <Box p={2} mt={2}>\n        <Typography variant=\"h6\">\n          {title}\n          <Box ml={1} clone>\n            <Chip label={`${cards.length} cards`} />\n          </Box>\n        </Typography>\n        {cards.map((card) => (\n          <SectionItem author={card.author} content={card.content} />\n        ))}\n      </Box>\n    </Paper>\n  );\n};\n\nconst SectionItem = ({ author, content }) => {\n  return (\n    <List dense>\n      <ListItem disableGutters>\n        <ListItemText\n          primary={content}\n          secondary={\n            <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n              {author.name}\n            </Typography>\n          }\n        />\n      </ListItem>\n    </List>\n  );\n};\n\nexport default function App() {\n  const [textareaContent, setTextareaContent] = useState(null);\n  const [snackbarState, setSnackbarState] = useState({\n    open: false,\n    message: \"\",\n    severity: \"danger\"\n  });\n\n  const renderSection = (section) => {\n    const [, cards] = section;\n\n    if (cards.length) return <Section section={section} />;\n\n    return null;\n  };\n\n  const handleSnackbarClose = () => {\n    setSnackbarState({\n      ...snackbarState,\n      open: false\n    });\n  };\n\n  const handleTextareaChange = (e) => {\n    try {\n      const parsedTextarea = JSON.parse(e.target.value);\n      setTextareaContent(parsedTextarea);\n      setSnackbarState({\n        ...snackbarState,\n        open: true,\n        message: \"JSON parsed\",\n        severity: \"success\"\n      });\n    } catch (e) {\n      setSnackbarState({\n        ...snackbarState,\n        open: true,\n        message: e.message,\n        severity: \"error\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <TextField\n        fullWidth\n        id=\"metroretro-json\"\n        inputProps={{\n          style: {\n            fontSize: 12,\n            fontFamily: [\"Consolas\", \"Monaco\", '\"Lucida Console\"'].join(\",\")\n          }\n        }}\n        label=\"Metroretro JSON\"\n        multiline\n        onChange={handleTextareaChange}\n        rows={15}\n        variant=\"filled\"\n      />\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\"\n        }}\n        autoHideDuration={5000}\n        key={`snackbar-${snackbarState.severity}`}\n        onClose={handleSnackbarClose}\n        open={snackbarState.open}\n      >\n        <Alert\n          onClose={handleSnackbarClose}\n          severity={snackbarState.severity}\n          variant=\"filled\"\n        >\n          {snackbarState.message}\n        </Alert>\n      </Snackbar>\n\n      {textareaContent &&\n        Object.entries(textareaContent).map((section) =>\n          renderSection(section)\n        )}\n    </div>\n  );\n}\n","import ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}